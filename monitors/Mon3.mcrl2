act P, Q, R;

proc Process = P.Q.R;


%====== MONITOR PART GENERATED ==============
% Original formula:[true*. Q. (! R)*. P. (! R)*. R] false


% ============================
% Modified formula:[(nil  + true+)][Q][(nil  + (! R)+)][P][(nil  + (! R)+)][R]false 
% ============================
act error, synch_internal ;
sort Action = struct R_mon
 | Q_mon
 | P_mon;

act R_mon,R_found;
act Q_mon,Q_found;
act P_mon,P_found;

sort ActionFormula = struct action(act1:Action)
| and(phi1:ActionFormula,phi2:ActionFormula) 
| or(phi1:ActionFormula,phi2:ActionFormula)  
| not(ActionFormula) 
| True 
| False ; 

map satisfy: Action # ActionFormula -> Bool;
var c1,c2:Action;
f,g:ActionFormula;
eqn
	 satisfy(c1,action(c2)) = (c1 == c2) ;  % rule (10)
	 satisfy(c1,and(f,g)) = satisfy(c1,f) && satisfy(c1,g); % rule (13)
	 satisfy(c1,not(f)) = !satisfy(c1,f); % rule (12)
	 satisfy(c1,or(f,g)) = satisfy(c1,f) || satisfy(c1,g); % rule (14)
	 satisfy(c1,True) = true; % rule (11)
	 satisfy(c1,False) = false; % rule (11)

% rule (1)
proc Monitor = Mon_"[(nil+true+)][Q][(nil+(!R)+)][P][(nil+(!R)+)][R]false"; 

% rule (5)
proc Mon_"[(nil+true+)][Q][(nil+(!R)+)][P][(nil+(!R)+)][R]false" = Mon_"(nil+true+)" . Mon_"[Q][(nil+(!R)+)][P][(nil+(!R)+)][R]false";

% rule (8)
proc Mon_"(nil+true+)" = Mon_"nil" + Mon_"true+";

% rule (1)
proc Mon_"nil" = synch_internal ;

% rule (9)
proc Mon_"true+" = Mon_"true". Mon_"true+";

% rule (6)
proc Mon_"true" = (satisfy(R_mon, True)) -> R_mon
 + (satisfy(Q_mon, True)) -> Q_mon
 + (satisfy(P_mon, True)) -> P_mon;

% rule (5)
proc Mon_"[Q][(nil+(!R)+)][P][(nil+(!R)+)][R]false" = Mon_"Q" . Mon_"[(nil+(!R)+)][P][(nil+(!R)+)][R]false";

% rule (6)
proc Mon_"Q" = (satisfy(R_mon, action(Q_mon))) -> R_mon
 + (satisfy(Q_mon, action(Q_mon))) -> Q_mon
 + (satisfy(P_mon, action(Q_mon))) -> P_mon;

% rule (5)
proc Mon_"[(nil+(!R)+)][P][(nil+(!R)+)][R]false" = Mon_"(nil+(!R)+)" . Mon_"[P][(nil+(!R)+)][R]false";

% rule (8)
proc Mon_"(nil+(!R)+)" = Mon_"nil" + Mon_"(!R)+";

% rule (1)
proc Mon_"nil" = synch_internal ;

% rule (1)
proc Mon_"(!R)+" = Mon_"(!R)". Mon_"(!R)+";

% rule (6)
proc Mon_"(!R)" = (satisfy(R_mon, not(action(R_mon)))) -> R_mon
 + (satisfy(Q_mon, not(action(R_mon)))) -> Q_mon
 + (satisfy(P_mon, not(action(R_mon)))) -> P_mon;

% rule (5)
proc Mon_"[P][(nil+(!R)+)][R]false" = Mon_"P" . Mon_"[(nil+(!R)+)][R]false";

% rule (6)
proc Mon_"P" = (satisfy(R_mon, action(P_mon))) -> R_mon
 + (satisfy(Q_mon, action(P_mon))) -> Q_mon
 + (satisfy(P_mon, action(P_mon))) -> P_mon;

% rule (5)
proc Mon_"[(nil+(!R)+)][R]false" = Mon_"(nil+(!R)+)" . Mon_"[R]false";

% rule (8)
proc Mon_"(nil+(!R)+)" = Mon_"nil" + Mon_"(!R)+";

% rule (1)
proc Mon_"nil" = synch_internal ;

% rule (9)
proc Mon_"(!R)+" = Mon_"(!R)". Mon_"(!R)+";

% rule (6)
proc Mon_"(!R)" = (satisfy(R_mon, not(action(R_mon)))) -> R_mon
 + (satisfy(Q_mon, not(action(R_mon)))) -> Q_mon
 + (satisfy(P_mon, not(action(R_mon)))) -> P_mon;

% rule (5)
proc Mon_"[R]false" = Mon_"R" . Mon_"false";

% rule (6)
proc Mon_"R" = (satisfy(R_mon, action(R_mon))) -> R_mon
 + (satisfy(Q_mon, action(R_mon))) -> Q_mon
 + (satisfy(P_mon, action(R_mon))) -> P_mon;

% rule (2)
proc Mon_"false" = error;

init hide ({synch_internal}, allow({error, synch_internal,R_found,Q_found,P_found}, 
 comm({	 R | R_mon -> R_found,
	 Q | Q_mon -> Q_found,
	 P | P_mon -> P_found
},
 Monitor  || Process)));
