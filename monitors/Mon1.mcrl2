act P, Q, R;

proc Process = P.Q.R;


%====== MONITOR PART GENERATED ==============
% Original formula:[(! P)*. R] false

% ============================
% Modified formula:[(nil  + (! P)+)][R]false 
% ============================
act error, synch_internal ;
sort Action = struct R_mon
 | Q_mon
 | P_mon;

act R_mon,R_found;
act Q_mon,Q_found;
act P_mon,P_found;

sort ActionFormula = struct action(act1:Action)
| and(phi1:ActionFormula,phi2:ActionFormula) 
| or(phi1:ActionFormula,phi2:ActionFormula)  
| not(ActionFormula) 
| True 
| False ; 

map satisfy: Action # ActionFormula -> Bool;
var c1,c2:Action;
f,g:ActionFormula;
eqn
	 satisfy(c1,action(c2)) = (c1 == c2) ;
	 satisfy(c1,and(f,g)) = satisfy(c1,f) && satisfy(c1,g);
	 satisfy(c1,not(f)) = !satisfy(c1,f);
	 satisfy(c1,or(f,g)) = satisfy(c1,f) || satisfy(c1,g);
	 satisfy(c1,True) = true;
	 satisfy(c1,False) = false;

proc Monitor = Mon_"[(nil+(!P)+)][R]false"; 

proc Mon_"[(nil+(!P)+)][R]false" = Mon_"(nil+(!P)+)" . Mon_"[R]false";

proc Mon_"(nil+(!P)+)" = Mon_"nil+(!P)+";

proc Mon_"nil+(!P)+" = Mon_"nil" + Mon_"(!P)+";

proc Mon_"nil" = synch_internal ;

proc Mon_"(!P)+" = Mon_"(!P)". Mon_"(!P)+";

proc Mon_"(!P)" = Mon_"!P";

proc Mon_"!P" = (satisfy(R_mon, not(action(P_mon)))) -> R_mon
 + (satisfy(Q_mon, not(action(P_mon)))) -> Q_mon
 + (satisfy(P_mon, not(action(P_mon)))) -> P_mon;

proc Mon_"[R]false" = Mon_"R" . Mon_"false";

proc Mon_"R" = (satisfy(R_mon, action(R_mon))) -> R_mon
 + (satisfy(Q_mon, action(R_mon))) -> Q_mon
 + (satisfy(P_mon, action(R_mon))) -> P_mon;

proc Mon_"false" = error;

init hide ({synch_internal}, allow({error, synch_internal,R_found,Q_found,P_found}, 
 comm({	 R | R_mon -> R_found,
	 Q | Q_mon -> Q_found,
	 P | P_mon -> P_found
},
 Monitor  || Process)));
